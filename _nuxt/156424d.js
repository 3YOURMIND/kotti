(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{1084:function(t,n,e){"use strict";e.r(n);e(206),e(868);var o=e(0),r=e(8),c=e(910),l=e(839),m=Object(r.db)(),f=m.withOptions({duration:5e3}),y=Object(o.defineComponent)({name:"DocumentationPageUsageComponentsToaster",components:{CodePreviewNew:c.a,ComponentInfo:l.a,KtButton:r.h,KtToast:r.Z,KtToaster:r.ab},setup:function(){return globalThis.toaster=m,{defaultToast:function(){f({header:"default header",text:"default toast"})},errorToast:function(){f({text:"I am an error toast",type:"my-error-toast"})},infoToast:function(){f({text:"I am an info toast",type:"my-info-toast"})},KtToast:r.Z,KtToaster:r.ab,linkToast:function(){f({custom:{href:"https://github.com/3YOURMIND/kotti",label:"See documentation"},text:"link toast",type:"my-link-toast"})},minimalisticToast:function(){f({text:"minimalistic toast",type:"my-minimalistic-toast"})},parserHack:{script:"script",template:"template"},permanentToast:function(){f({duration:null,text:"This is a one-line toast message. This is a one-line toast message. This is a one-line toast message."})},successToast:function(){f({text:"I am a success toast",type:"my-success-toast"})},toaster:m,warningToast:function(){f({text:"I am a warning toast",type:"my-warning-toast"})}}}}),d=e(27),component=Object(d.a)(y,(function(){var t=this,n=t._self._c;t._self._setupProxy;return n("div",[n("ComponentInfo",{attrs:{component:t.KtToaster}}),t._v(" "),n("CodePreviewNew",{attrs:{code:"\n\t\t\t<".concat(t.parserHack.script," lang=\"ts\">\n\t\t\timport { createToaster, KtButton, KtToast, KtToaster } from '@3yourmind/kotti-ui'\n\n\t\t\tconst toaster = createToaster<{\n\t\t\t\tdefault: Record<string, never>\n\t\t\t\t'my-error-toast': Record<string, never>\n\t\t\t\t'my-info-toast': Record<string, never>\n\t\t\t\t'my-link-toast': {\n\t\t\t\t\thref: string,\n\t\t\t\t\tlabel: string,\n\t\t\t\t},\n\t\t\t\t'my-minimalistic-toast': Record<string, never>\n\t\t\t\t'my-success-toast': Record<string, never>,\n\t\t\t\t'my-warning-toast': Record<string, never>\n\t\t\t}>()\n\n\t\t\tconst show = toaster.withOptions({ duration: 5000 })\n\n\t\t\texport default defineComponent({\n\t\t\t\tname: 'Example',\n\t\t\t\tcomponents: {\n\t\t\t\t\tKtButton,\n\t\t\t\t\tKtToast,\n\t\t\t\t\tKtToaster,\n\t\t\t\t},\n\t\t\t\tsetup () {\n\t\t\t\t\t// you can also try this in your browser console\n\t\t\t\t\tglobalThis.toaster = toaster\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdefaultToast: () => {\n\t\t\t\t\t\t\tshow({\n\t\t\t\t\t\t\t\theader: 'default header',\n\t\t\t\t\t\t\t\ttext: 'default toast',\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t},\n\t\t\t\t\t\terrorToast: () => {\n\t\t\t\t\t\t\tshow({\n\t\t\t\t\t\t\t\ttext: 'I am an error toast',\n\t\t\t\t\t\t\t\ttype: 'my-error-toast',\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinfoToast: () => {\n\t\t\t\t\t\t\tshow({\n\t\t\t\t\t\t\t\ttext: 'I am an info toast',\n\t\t\t\t\t\t\t\ttype: 'my-info-toast',\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinkToast: () => {\n\t\t\t\t\t\t\tshow({\n\t\t\t\t\t\t\t\tcustom: {\n\t\t\t\t\t\t\t\t\thref: 'https://github.com/3YOURMIND/kotti',\n\t\t\t\t\t\t\t\t\tlabel: 'See documentation',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\ttext: 'link toast',\n\t\t\t\t\t\t\t\ttype: 'my-link-toast',\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t},\n\t\t\t\t\t\tminimalisticToast: () => {\n\t\t\t\t\t\t\tshow({\n\t\t\t\t\t\t\t\ttext: 'minimalistic toast',\n\t\t\t\t\t\t\t\ttype: 'my-minimalistic-toast',\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpermanentToast: () => {\n\t\t\t\t\t\t\tshow({\n\t\t\t\t\t\t\t\tduration: null,\n\t\t\t\t\t\t\t\ttext: 'This is a one-line toast message. This is a one-line toast message. This is a one-line toast message.',\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsuccessToast: () => {\n\t\t\t\t\t\t\tshow({\n\t\t\t\t\t\t\t\ttext: 'success toast',\n\t\t\t\t\t\t\t\ttype: 'my-success-toast',\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t},\n\t\t\t\t\t\twarningToast: () => {\n\t\t\t\t\t\t\tshow({\n\t\t\t\t\t\t\t\ttext: 'I am a warning toast',\n\t\t\t\t\t\t\t\ttype: 'my-warning-toast',\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t</").concat(t.parserHack.script,">\n\n\t\t\t<").concat(t.parserHack.template,">\n\t\t\t\t<KtToaster :toaster='toaster'>\n\t\t\t\t\t<").concat(t.parserHack.template," #my-minimalistic-toast>\n\t\t\t\t\t\t<KtToast\n\t\t\t\t\t\t\t:type='{\n\t\t\t\t\t\t\t\ticon: null,\n\t\t\t\t\t\t\t\tbackgroundColor: 'black',\n\t\t\t\t\t\t\t\tdarkColor: 'black',\n\t\t\t\t\t\t\t\tlightColor: 'var(--gray-70)'\n\t\t\t\t\t\t\t}'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</").concat(t.parserHack.template,">\n\t\t\t\t\t<").concat(t.parserHack.template," #my-link-toast='{ custom, text }'>\n\t\t\t\t\t\t<KtToast>\n\t\t\t\t\t\t\t<").concat(t.parserHack.template," #text>\n\t\t\t\t\t\t\t\t<span v-text='text' />\n\t\t\t\t\t\t\t\t<a :href='custom.href'>{{ custom.label }}</a>\n\t\t\t\t\t\t\t</").concat(t.parserHack.template,">\n\t\t\t\t\t\t</KtToast>\n\t\t\t\t\t</").concat(t.parserHack.template,">\n\t\t\t\t\t<").concat(t.parserHack.template," #my-error-toast>\n\t\t\t\t\t\t<KtToast type='error' />\n\t\t\t\t\t</").concat(t.parserHack.template,">\n\t\t\t\t\t<").concat(t.parserHack.template," #my-info-toast>\n\t\t\t\t\t\t<KtToast type='info' />\n\t\t\t\t\t</").concat(t.parserHack.template,">\n\t\t\t\t\t<").concat(t.parserHack.template," #my-success-toast>\n\t\t\t\t\t\t<KtToast type='success' />\n\t\t\t\t\t</").concat(t.parserHack.template,">\n\t\t\t\t\t<").concat(t.parserHack.template," #my-warning-toast>\n\t\t\t\t\t\t<KtToast type='warning' />\n\t\t\t\t\t</").concat(t.parserHack.template,">\n\t\t\t\t</KtToaster>\n\n\t\t\t\t<div style='display: flex; flex-wrap: wrap; gap: var(--unit-6);'>\n\t\t\t\t\t<KtButton @click='defaultToast'>default toast</KtButton>\n\t\t\t\t\t<KtButton @click='errorToast'>error toast</KtButton>\n\t\t\t\t\t<KtButton @click='infoToast'>info toast</KtButton>\n\t\t\t\t\t<KtButton @click='successToast'>success toast</KtButton>\n\t\t\t\t\t<KtButton @click='warningToast'>warning toast</KtButton>\n\t\t\t\t\t<KtButton @click='permanentToast'>permanent toast</KtButton>\n\t\t\t\t\t<KtButton @click='minimalisticToast'>minimalistic toast</KtButton>\n\t\t\t\t\t<KtButton @click='linkToast'>link toast</KtButton>\n\t\t\t\t</div>\n\t\t\t</").concat(t.parserHack.template,">\n\t\t"),fileName:"Example.vue",language:"vue"}},[n("KtToaster",{attrs:{toaster:t.toaster},scopedSlots:t._u([{key:"my-minimalistic-toast",fn:function(){return[n("KtToast",{attrs:{type:{icon:null,backgroundColor:"black",darkColor:"black",lightColor:"var(--gray-70)"}}})]},proxy:!0},{key:"my-link-toast",fn:function(e){var o=e.custom,text=e.text;return[n("KtToast",{scopedSlots:t._u([{key:"text",fn:function(){return[n("span",{domProps:{textContent:t._s(text)}}),t._v(" "),n("a",{attrs:{href:o.href}},[t._v(t._s(o.label))])]},proxy:!0}],null,!0)})]}},{key:"my-error-toast",fn:function(){return[n("KtToast",{attrs:{type:"error"}})]},proxy:!0},{key:"my-info-toast",fn:function(){return[n("KtToast",{attrs:{type:"info"}})]},proxy:!0},{key:"my-success-toast",fn:function(){return[n("KtToast",{attrs:{type:"success"}})]},proxy:!0},{key:"my-warning-toast",fn:function(){return[n("KtToast",{attrs:{type:"warning"}})]},proxy:!0}])}),t._v(" "),n("div",{staticStyle:{display:"flex","flex-wrap":"wrap",gap:"var(--unit-6)"}},[n("KtButton",{on:{click:t.defaultToast}},[t._v("default toast")]),t._v(" "),n("KtButton",{on:{click:t.errorToast}},[t._v("error toast")]),t._v(" "),n("KtButton",{on:{click:t.infoToast}},[t._v("info toast")]),t._v(" "),n("KtButton",{on:{click:t.successToast}},[t._v("success toast")]),t._v(" "),n("KtButton",{on:{click:t.warningToast}},[t._v("warning toast")]),t._v(" "),n("KtButton",{on:{click:t.permanentToast}},[t._v("permanent toast")]),t._v(" "),n("KtButton",{on:{click:t.minimalisticToast}},[t._v("minimalistic toast")]),t._v(" "),n("KtButton",{on:{click:t.linkToast}},[t._v("link toast")])],1)],1),t._v(" "),n("h2",[t._v("Usage")]),t._v(" "),n("CodePreviewNew",{attrs:{code:'\n\t\t\timport { success, toaster } from "~/shared/toaster.ts"\n\n\t\t\texport const someAction = async () => {\n\t\t\t\t// show a toast without waiting for it\n\t\t\t\tsuccess({ text: "success" })\n\n\t\t\t\t// wait for toast to be done showing, or to error when aborted\n\t\t\t\tawait success({ text: "will wait for this toast" }).done\n\n\t\t\t\t// abort the toast early\n\t\t\t\tconst toBeAborted = success({ text: "will be aborted" })\n\t\t\t\ttoBeAborted.abort()\n\n\t\t\t\t// programmatically push any kind of notification\n\t\t\t\ttoaster.show({ text: "anything", type: "error" })\n\n\t\t\t\t// create some custom show handlers with default options\n\t\t\t\tconst customizedShow = toaster.withOptions({ type: "success" })\n\t\t\t\tconst message = customizedShow({ text: "my message" })\n\t\t\t\tawait message.done\n\t\t\t}\n\t\t',fileName:"~/store/my-module.ts",language:"typescript"}}),t._v(" "),n("CodePreviewNew",{attrs:{code:"\n\t\t\t<".concat(t.parserHack.script,' lang="ts">\n\t\t\timport { defineComponent } from "vue"\n\n\t\t\timport { success } from "~/shared/toaster.ts"\n\n\t\t\texport default defineComponent({\n\t\t\t\tsetup() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tonClick: async () => {\n\t\t\t\t\t\t\tawait success({\n\t\t\t\t\t\t\t\ttext: "something went well",\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t</').concat(t.parserHack.script,">\n\n\t\t\t<").concat(t.parserHack.template,'>\n\t\t\t\t<KtButton label="Show Toast" @click="onClick">\n\t\t\t</').concat(t.parserHack.template,">\n\t\t"),fileName:"~/components/MyComponent.vue",language:"vue"}}),t._v(" "),n("h2",[t._v("Initial Setup")]),t._v("\n\n\tThis is the per-app setup process for "),n("code",[t._v("KtToaster")]),t._v(" "),n("CodePreviewNew",{attrs:{code:"\n\t\t\t<".concat(t.parserHack.template,'>\n\t\t\t\t<KtToaster :toaster="toaster" />\n\t\t\t</').concat(t.parserHack.template,">\n\n\t\t\t<").concat(t.parserHack.script,' lang="ts">\n\t\t\timport { defineComponent } from "vue"\n\n\t\t\timport { toaster } from "~/shared/toaster.ts"\n\n\t\t\texport default defineComponent({\n\t\t\t\tsetup() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t// KtToaster needs a reference to your per-app toaster instance\n\t\t\t\t\t\ttoaster\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t</').concat(t.parserHack.script,">\n\t\t"),fileName:"App.vue",language:"vue"}}),t._v(" "),n("CodePreviewNew",{attrs:{code:'\n\t\t\timport { createToaster } from "@3yourmind/kotti-ui"\n\n\t\t\t// create a toaster instance, usually there should only ever be one per app\n\t\t\texport const toaster = createToaster<{\n\t\t\t\tdefault: Record<string, never>\n\t\t\t\terror: Record<string, never>\n\t\t\t\tsuccess: Record<string, never>\n\t\t\t}>()\n\n\t\t\t// show a maximum number of toasts simultaneously, defaults to 3\n\t\t\t// export const toaster = createToaster({ numberOfToasts: 6 })\n\n\t\t\t// define custom notification presets with pre-configured options\n\t\t\texport const error = toaster.withOptions({ duration: 5_000, type: "error" })\n\t\t\texport const success = toaster.withOptions({ duration: 5_000, type: "success" })\n\t\t\texport const successPersistent = toaster.withOptions({ type: "success" })\n\t\t',fileName:"~/shared/toaster.ts",language:"typescript"}}),t._v(" "),n("ComponentInfo",{attrs:{component:t.KtToast}}),t._v(" "),n("nuxt-link",{attrs:{to:"/usage/components/banner"}},[t._v("\n\t\tSee "),n("code",[t._v("KtBanner")])]),t._v(" "),n("CodePreviewNew",{attrs:{code:"\n\t\t\t<KtToast type='error' />\n\t\t\t<KtToast type='info' />\n\t\t\t<KtToast type='success' />\n\t\t\t<KtToast type='warning' />\n\t\t\t<KtToast\n\t\t\t\t:type=\"{\n\t\t\t\t\ticon: null,\n\t\t\t\t\tbackgroundColor: 'var(--gray-10)',\n\t\t\t\t\tdarkColor: 'var(--gray-70)',\n\t\t\t\t\tlightColor: 'var(--gray-20)'\n\t\t\t\t}\"\n\t\t\t/>\n\t\t",language:"vue-html"}})],1)}),[],!1,null,null,null);n.default=component.exports},868:function(t,n,e){"use strict";e(869)},869:function(t,n,e){"use strict";var o=e(10),r=e(15);o({global:!0,forced:r.globalThis!==r},{globalThis:r})}}]);